<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:java="http://www.mulesoft.org/schema/mule/java"
	xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:db="http://www.mulesoft.org/schema/mule/db"
	xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/java http://www.mulesoft.org/schema/mule/java/current/mule-java.xsd">

	<sub-flow name="generatePDF" doc:id="886478c7-a8fd-4ff7-9ccc-c4faaac1504e">
		<ee:transform doc:name="Transform Message"
			doc:id="835feff9-29a7-46a0-97b5-30a31dfb250b">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/java
var stringObj= write(payload ,"application/json")
---
//"OrderDetails:  \n\n" ++ trim ((((stringObj replace "{" with "") replace "}" with "") replace "[" with "") replace "]" with "")
stringObj]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<java:new constructor="JsonToPDF()" doc:name="New"
			doc:id="7492ecc3-8664-4536-895b-4e01092ad63e" class="com.yash.utility.JsonToPDF"
			target="JsonToPdf" />
		<java:invoke doc:name="Invoke"
			doc:id="a0d55f77-e0a0-4303-a28d-2f441a7a5738" instance="#[vars.JsonToPdf]"
			class="com.yash.utility.JsonToPDF" method="jsontopdf(String , String)"
			outputMimeType="application/octet-stream">
			<java:args><![CDATA[#[{
        filename: "C:\\test\\test1.pdf",
        content: payload
      }]]]></java:args>
		</java:invoke>
		<ee:transform doc:name="Transform Message"
			doc:id="ea8c483b-5299-4905-a770-929c0c5e03f6">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/octet-stream
---
payload]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</sub-flow>
	<sub-flow name="orderJsonToPDF" doc:id="3ed6b64b-d33e-4ba3-96c4-2dbcf37c46e2">
		<ee:transform doc:name="Transform Message"
			doc:id="91d26208-7370-4811-abf6-ef1dad35f863">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/java
var stringObj= write(payload ,"application/json")
---
//"OrderDetails:  \n\n" ++ trim ((((stringObj replace "{" with "") replace "}" with "") replace "[" with "") replace "]" with "")
stringObj]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<java:new constructor="OrderJsonToPDF()" doc:name="New"
			doc:id="f7b44369-42f4-4d47-8b46-4c82abd6adfe" class="com.yash.utility.OrderJsonToPDF"
			target="JsonToPdf" />
		<java:invoke doc:name="Invoke"
			doc:id="e8c90fe1-a2df-4681-b381-b50f7b4f6e7e" instance="#[vars.JsonToPdf]"
			class="com.yash.utility.OrderJsonToPDF" method="jsontopdf(String , String)"
			outputMimeType="application/octet-stream">
			<java:args><![CDATA[#[{
        filename: "C:\\test\\test1.pdf",
        content: payload
      }]]]></java:args>
		</java:invoke>
		<logger level="INFO" doc:name="Logger"
			doc:id="992a12ed-cb80-4772-9aba-043404546866" message="#[payload]" />
		<ee:transform doc:name="Transform Message"
			doc:id="01cd0394-c0af-485a-852c-bcbb1c901406">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/octet-stream
---
payload]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</sub-flow>

	<flow name="get-order-flow" doc:id="084a10b0-a3cc-44b7-a346-d983d1bb6fd9">
		<logger level="INFO" doc:name="Logger"
			doc:id="c96f92b9-8390-44de-8f2c-7c7dc90c2a1c" message="#[attributes.queryParams.'type']" />
		<set-variable value="#[attributes.queryParams.'type']"
			doc:name="type" doc:id="b28bb5b2-80a3-4c50-bc5f-c4016566bd7d"
			variableName="type" />
		<set-variable value="#[payload.orderId]" doc:name="orderId" doc:id="4b9f80c9-a9d7-478d-a9fe-9fb40cdc43ed" variableName="orderId"/>
		<db:select doc:name="Select" doc:id="6e00cfba-a501-4f1f-bb69-e0d43d46de42"
			config-ref="MYSQL_Database_Config">
			<db:sql>SELECT o.orderId, op.productId, op.quantity, p.price,
				p.productName, o.createdBy, o.orderDate, o.userId, o.productStoreId
				from e_com_mule_db.order o LEFT JOIN e_com_mule_db.orderproduct op
				ON o.orderId = op.orderId LEFT JOIN e_com_mule_db.product p ON
				op.productId = p.productId WHERE o.orderId=:orderId;</db:sql>
			<db:input-parameters><![CDATA[#[payload]]]></db:input-parameters>
		</db:select>
		<choice doc:name="Choice" doc:id="eb6a89d8-b2a7-4123-9dc7-cd8dbb12a906" >
			<when expression="#[(sizeOf(payload)) &gt; 0]">
				<ee:transform doc:name="originalPayload var" doc:id="3a618f36-f845-4f54-a8f9-382f8e740977">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
var ordeHeader= {
	"orderId": payload[0].orderId,
	"userId": payload[0].userId,
	"orderDate": payload[0].orderDate,
	"createdBy":payload[0].createdBy,
	"productStoreId":payload[0].productStoreId
}
---
{
	(ordeHeader),
	products: payload map ($ -- ordeHeader)
}
]]></ee:set-payload>
			</ee:message>
			<ee:variables>
			</ee:variables>
		</ee:transform>
				<choice doc:name="Choice" doc:id="86ed0977-3ffb-4ed1-82ec-37dace209c9d">
			<when expression="#[vars.'type' != null and vars.'type' == &quot;pdf&quot;]">
				<flow-ref doc:name="orderJsonToPDF" doc:id="7df20203-cae2-4a38-8842-2f24e79c9584" name="orderJsonToPDF" />
			</when>
			<otherwise>
				<logger level="INFO" doc:name="Logger" doc:id="a08ab452-67b2-43ba-9461-961ac9c0d63c" message="Processed!" />
			</otherwise>
		</choice>
			</when>
			<otherwise >
				<ee:transform doc:name="Transform Message" doc:id="db97062c-8de8-405c-9ac8-6900d5d4b620" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	orderId: vars.orderId,
	status: "Order Not Found"
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</otherwise>
		</choice>
	</flow>
	<flow name="get-invoice-flow" doc:id="a603f8a7-1384-4a2f-9d5d-71b0f29bc352">
		<logger level="INFO" doc:name="Logger"
			doc:id="510c3941-8376-47c0-a0a5-3fd06d8a070f" />
	</flow>
	<flow name="create-cart-flow" doc:id="802219ae-afa6-42f0-b3e4-d7ecab3102ef">
		<ee:transform doc:name="product query"
			doc:id="95786efb-641b-4a6d-9c8a-aeed95c6d321">
			<ee:message>
			</ee:message>
			<ee:variables>
				<ee:set-variable variableName="query"><![CDATA[%dw 2.0
output application/java
var productId= (payload.products.*productId) joinBy "','" 
---
"select productId,quantity from product where productId in ('" ++ productId ++ "' )"]]></ee:set-variable>
				<ee:set-variable variableName="originalPayload"><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<db:select doc:name="Select" doc:id="e5f2d0b1-e41b-4319-80a2-857ab6aba6e8"
			config-ref="MYSQL_Database_Config">
			<db:sql>#[vars.query]</db:sql>
		</db:select>
		<ee:transform doc:name="product inventory check"
			doc:id="a5d1315a-f08d-4f0f-8dd7-d0d03f34cd11">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
(payload map using (product= $) {
	(vars.originalPayload.products filter (($.productId == product.productId) and $.quantity >= product.quantity) map  {
		dd:$.productId,
		qunatity:$.quantity
	})
}) filter $ != {}]]></ee:set-payload>
			</ee:message>
			<ee:variables>
				<ee:set-variable variableName="orderTableResponse"><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<choice doc:name="Choice" doc:id="59ae99bf-b784-42e5-8389-8a3ff1097fbd">
			<when expression="#[sizeOf(payload) != 0]">
				<logger level="INFO" doc:name="Logger"
					doc:id="4e9ca207-02b2-4dee-b186-10f69f00579b" />
				<ee:transform doc:name="out of Stock products resp"
					doc:id="df217d9a-7db2-4b62-9613-b86f8cabe107">
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
	Status:"order Canceled",
	Reason: "product is out of stock"
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</when>
			<otherwise>
				<ee:transform doc:name="order insert query"
					doc:id="e5891b33-b9aa-47ed-8574-c96de8f05442">
					<ee:message>
					</ee:message>
					<ee:variables>
						<ee:set-variable variableName="query"><![CDATA[%dw 2.0
output application/java
var payload01 = vars.originalPayload
var data =  payload01.orderId as Number ++ ",'" ++ payload01.orderName ++ "','"  ++ payload01.orderDate ++ "','" ++ payload01.createdBy ++ "','" ++ payload01.productStoreId ++ "','" ++ payload01.userId
---
"INSERT INTO e_com_mule_db.order (orderId, orderName, orderDate, createdBy, productStoreId, userId) values (" ++ data ++ "');"]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
				<db:insert doc:name="Insert" doc:id="c2b3f44f-ac52-4255-b2a1-38eb974e6ef1"
					config-ref="MYSQL_Database_Config">
					<db:sql>#[vars.query]</db:sql>
				</db:insert>
				<ee:transform doc:name="query for association table"
					doc:id="3884b4fc-260e-47ec-8622-011a92724635">
					<ee:message>
					</ee:message>
					<ee:variables>
						<ee:set-variable variableName="query"><![CDATA[%dw 2.0
output application/json
---
(vars.orderTableResponse map using (product= $) {
	(vars.originalPayload.products filter (($.productId == product.productId) and $.quantity <= product.quantity) map  {
		orderId: vars.originalPayload.orderId,
		productId:$.productId,
		quantity:$.quantity
	})
}) filter $ != {}]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
				<db:bulk-insert doc:name="Bulk insert"
					doc:id="d3b7103b-cb64-4a60-942e-70c487d60ca9" config-ref="MYSQL_Database_Config">
					<db:bulk-input-parameters><![CDATA[#[vars.query]]]></db:bulk-input-parameters>
					<db:sql>INSERT INTO e_com_mule_db.orderproduct (orderId, productId,
						quantity) values (:orderId,:productId , :quantity);</db:sql>
				</db:bulk-insert>
				<ee:transform doc:name="product table query"
					doc:id="b2dd5e4c-3d16-4127-8a1f-60823dd44b62">
					<ee:message>
					</ee:message>
					<ee:variables>
						<ee:set-variable variableName="query"><![CDATA[%dw 2.0
output application/json
---
(vars.orderTableResponse map using (product= $) {
	(vars.originalPayload.products filter (($.productId == product.productId) and $.quantity <= product.quantity) map  {
		orderId: vars.originalPayload.orderId,
		productId:$.productId,
		quantity:(product.quantity - $.quantity)
	})
}) filter $ != {}]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
				<db:bulk-update doc:name="Bulk update"
					doc:id="d914ec7c-1c8c-4707-a269-875cfe1d5c6e" config-ref="MYSQL_Database_Config">
					<db:bulk-input-parameters><![CDATA[#[vars.query]]]></db:bulk-input-parameters>
					<db:sql>UPDATE e_com_mule_db.product SET quantity = :quantity WHERE
						productId = :productId;</db:sql>
				</db:bulk-update>
				<ee:transform doc:name="order response"
					doc:id="b496a456-e3cd-47e7-bbe8-56072899021c">
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
	status:"Order has been placed successfully #",
	orderId:vars.originalPayload.orderId 
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</otherwise>
		</choice>
		<logger level="INFO" doc:name="Logger"
			doc:id="fb8d7655-f409-4b43-9e5d-2d91cfc302ee" message="processing completed  #[payload]" />
	</flow>
	<flow name="get-invoice-by-id-flow" doc:id="937c6095-a9b7-476f-a2de-8f13ddd69cb4">
		<set-variable value="#[attributes.uriParams.invoiceId]"
			doc:name="invoiceId" doc:id="7bb0bd64-6c5c-41c4-80c8-8fcc451466ba"
			variableName="invoiceId" />
		<set-variable value="#[attributes.queryParams.'type']"
			doc:name="type" doc:id="dd4aa133-5311-4011-a305-c3a79b6d7682"
			variableName="type" />
		<http:request method="GET" doc:name="get invoice call to sap api"
			doc:id="3d037106-79eb-47c5-a354-c798c0cf9ef1" config-ref="SAP_API_HTTP_Configuration"
			path="${sap.path}/{invoiceId}">
			<http:headers><![CDATA[#[output application/java
---
{
	Authorization : p('sap.auth')
}]]]></http:headers>
			<http:uri-params><![CDATA[#[output application/java
---
{
	invoiceId : "in_1FQsVxLtNhj8WVidCrt5kZ3V"
}]]]></http:uri-params>
		</http:request>
		<ee:transform doc:name="Transform Message"
			doc:id="b5a7e3c8-965a-4f3c-bb5f-93885456e075">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
({"id": vars.invoiceId }) ++ (payload - 'id')]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="INFO" doc:name="Logger"
			doc:id="016fd2dc-0549-4343-ad75-7579db8f7564" message="#[attributes.queryParams.'type']" />
		<choice doc:name="Choice" doc:id="e9ec8c12-8d9d-4792-a18c-ee0b94079d9f">
			<when expression="#[vars.'type' != null and vars.'type' == &quot;pdf&quot;]">
				<flow-ref doc:name="Flow Reference" doc:id="b5db0e7d-8a4d-449d-a12f-e3866d2f47ae"
					name="generatePDF" />
			</when>
			<otherwise>
				<logger level="INFO" doc:name="Logger"
					doc:id="a078a7bb-a547-4c4d-a9c0-447b20a64efa" message="processed!!!!!!!!!!" />
			</otherwise>
		</choice>
	</flow>

</mule>
